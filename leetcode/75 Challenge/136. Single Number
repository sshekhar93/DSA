Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.
===========================================================================================================================

Leetcode Solution:
==================
Approach 3: Math
Concept

2∗(a+b+c)−(a+a+b+b+c)=c2 * (a + b + c) - (a + a + b + b + c) = c2∗(a+b+c)−(a+a+b+b+c)=c

class Solution {
  public int singleNumber(int[] nums) {
    int sumOfSet = 0, sumOfNums = 0;
    Set<Integer> set = new HashSet();

    for (int num : nums) {
      if (!set.contains(num)) {
        set.add(num);
        sumOfSet += num;
      }
      sumOfNums += num;
    }
    return 2 * sumOfSet - sumOfNums;
  }
}



Approach 4: Bit Manipulation
Concept

If we take XOR of zero and some bit, it will return that bit
- a⊕0=a
If we take XOR of two same bits, it will return 0
- a⊕a=0
- a⊕b⊕a=(a⊕a)⊕b=0⊕b=b

Code:
=====
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int sum = 0;
        for(auto num: nums){
            sum ^= num;
        }
        return sum;
    }
};
