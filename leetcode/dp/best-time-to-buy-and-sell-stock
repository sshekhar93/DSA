Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

=========================SOLUTION=============================================
// single traversal solution
// this method keeps track of lowest valley i.e minPrice and difference between lowest valley and highest peak after that i.e maxProf
// whenever a new lowest peak is encountred then minPrice value is updated and after that maxProf value is updated only if difference between this new minPrice and stock price after that has value more than current maxProf.

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minPrice = INT_MAX;
        int maxProf = 0;
        for(int i = 0; i < prices.size(); i++){
            if(minPrice > prices[i]){
                minPrice = prices[i];
            }
            else if((prices[i]-minPrice)> maxProf){
                maxProf = prices[i]-minPrice;
            }
        }
        return maxProf;
    }
};
