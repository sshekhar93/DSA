Given an unsorted array of integers, find the number of longest increasing subsequence.

Example 1:
Input: [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:
Input: [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.
Note: Length of the given array will be not exceed 2000 and the answer is guaranteed to be fit in 32-bit signed int.

========================SOLUTION================================================

int findNumbersOfLIS(vector<int>& nums){
  int count=0;
  int max=1;
  int dp[nums.size()][2];

  if(nums.size() <= 1)
    return nums.size();

  for(int i=0; i < nums.size(); ++i){
    dp[i][0]=1;
    dp[i][1]=1;
  }

  for(int i=1; i<nums.size(); ++i){
    for(int j=0; j < i; ++j){
      if(nums[j] < nums[i]){
        if(dp[i][0] < dp[j][0] + 1){
	  dp[i][0] = dp[j][0] + 1;
	  dp[i][1] = dp[j][1];
	}
	else if(dp[i][0] == dp[j][0]+1){
	  dp[i][1] = dp[i][1]+dp[j][1];
	}
      }
    }
    if(max < dp[i][0])
      max = dp[i][0];
  }

  for(int i = 0; i < nums.size(); ++i){
    if(dp[i][0] == max){
      count += dp[i][1];
    }
  }

  return count;

}
