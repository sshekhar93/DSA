Leetcode question 746

On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).

Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.

Example 1:
Input: cost = [10, 15, 20]
Output: 15
Explanation: Cheapest is start on cost[1], pay that cost and go to the top.
Example 2:
Input: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
Output: 6
Explanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].
Note:
cost will have a length in the range [2, 1000].
Every cost[i] will be an integer in the range [0, 999].

=====================SOLUTION=================================

// dp solution 
// we can calculate min cost needed from the last step
// for last step min cost will be the cost for that step itself since you only need one step to reach the top
// similarly for second last step also min cost will be cost of that step itself since you can take directly 2 steps to reach the top
// from third last step onwards we can calculate min cost from i step by adding the cost of i step to the minimum of the cost from i+1 i+2 steps
// this way we can calculate minimum cost for steps till step 0
// in the end we will return the minimum of step 0 and step 1


int minCostClimbingStairs(vector<int>& cost){

  vector<inr> dp(cost.size(),0);
  dp[cost.size()-1] = cost[cost.size()-1];
  dp[cost.size()-2] = cost[cost.size()-2];

  for(int i = cost.size()-3; i >= 0; --i){
    dp[i] = cost[i] + min(dp[i+1],dp[i+2]);
  }
  return min(dp[0],dp[1]);
}
